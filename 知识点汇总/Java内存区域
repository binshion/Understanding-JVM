## 1.运行时数据区域
​		Java虚拟机所管理的内存将会包括以下几个运行时数据区域：方法区（Method Area）、堆（Heap）、虚拟机栈（VM Stack）、本地方法栈（Native Method Stack）、程序计数器（Program Counter Register）。

* 程序计数器：可以看做是当前线程所执行的字节码的行号指示器。在VM的概念模型中，字节码解释器工作时通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。此内存区域是唯一一个在Java VM规范中没有规定任何OOM Error情况的区域。
* Java 虚拟机栈：也是线程私有，它的生命周期与线程相同。虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧（Stack Frame）用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。经常有人把Java内存区分为Heap和Stack，这里Stack就是讲的虚拟机栈，或者说是虚拟机栈中局部变量表部分。局部变量表存放了编译期可知的各种基本数据类型（8种）、对象引用和returnAddress类型（指向了一条字节码指令的地址）。其中64位长度long和double类型数据会还在那用2个局部变量空间（Slot），其余的数据类型只占一个。局部变量表所需的内存空间在编译期完成分配，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期不会改变局部变量表的大小。在Java虚拟机规范中，对这个区域规定了 两种异常情况：StackOverflowError（线程请求的栈深度大于虚拟机所允许的深度）,OutOfMemoryError（虚拟机栈如果可以动态扩展，在扩展时无法申请到足够的内存）。
* 本地方法栈：和虚拟机栈发挥的作用类似。区别：虚拟机栈为执行Java方法（字节码）服务，而本地方法栈则为虚拟机使用到的Native方法服务。与虚拟机栈一样也会抛出两种异常。
* Java堆：对大多数应用来说，Java Heap 是Java虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的一块区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。（栈上分配、标量替换等优化技术使得不那么绝对）。Java堆是垃圾收集器管理的主要区域，因此很多时候也被称为GC堆。**从内存回收的角度来看**，由于现在收集器基本采用分代收集算法，所以Java堆还可以细分为：新生代和老年代；再细致一线的有Eden空间、From Survivor空间、To Survivor空间等。**从内存分配的角度来看**，线程共享的Java堆中可能划分出多个线程私有的分配缓冲区（TLAB,Thread Local Allocation Buffer）。无论如何划分，都与存放内容无关，进一步划分的目的是为了更好地回收内存，或者更快地分配内存。Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可。在实现时，既可以实现成固定大小，也可以是克扩展的（-Xmx和-Xms控制）。如果堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出OutOfMenoryError异常。
