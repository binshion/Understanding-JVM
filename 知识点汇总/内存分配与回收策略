## 1.对象优先在Eden区分配

​		大多数情况下，对象在新生代Eden区中分配。当Eden区没有足够空间进行分配时，虚拟机将发起一次Minor GC。

## 2.大对象直接进入老年代

​		需要大量连续内存空间的Java对象。虚拟机提供-XX:PretenureSizeThreshold参数，令大于这个设置值得对象直接在老年代分配。

## 3.长期存活的对象将进入老年代

​		虚拟机给每个对象定义一个对象年龄计数器。如果对象在Eden区出生并经过第一次Minor GC后依然存活，并且能被Survivor区容纳的话，将被移动到Survivor区，并且对象年龄设置为1。对象在Survivor区每熬过一次Minor GC，年龄就增加1，当年龄增加到一定程度（默认15），将会被晋升到老年代中。对象晋升老年代的年龄阀值可通过参数：-XX:MaxTenuringThreshold设置。

## 4.动态对象年龄判定

​		虚拟机并不是永远地要求对象的年龄必须达到了MaxTenuringThreshold才能晋升老年代，如果在Survivor空间中相同年龄所有对象大小总和大于Survivor空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代，无须等到MaxTenuringThreshold中要求的年龄。

## 5.空间分配担保

​		在发生Minor GC之前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象的总空间。如果这个条件成立，那么Minor GC可以确保是安全的。如果不成立，则虚拟机会查看HandlePromotionFailure设置值是否允许担保失败。如果允许，那么继续检查老年代最大可用空间是否大于历次晋升到老年代你对象的平均大小。如果大于，将尝试一次Minor GC，尽管这次Minor GC是有风险的；如果小于，或者HandlePromotionFailure设置不允许毛线，那这时也要改为进行一次Full GC。虽然担保失败时绕的圈子是最大的，但大部分情况下都还是将HandlePromotionFailure开关打开，避免Full GC过于频繁。