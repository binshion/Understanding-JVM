## 1.Java内存模型

​		主要目标是定义程序中各个变量的访问规则，即在虚拟机中将变量存储到内存和内存中取出变量这样的底层细节。Java内存模型规定所有的变量都存储在主内存，每条线程都有自己的工作内存，线程的工作内存中保存了被该线程使用到的变量的主内存副本拷贝，线程对变量的所有操作都必须在工作内存中今夕，而不能直接读取主内存中的变量。

* 内存间交互操作
  * lock锁定
  * unlock解锁
  * read读取
  * load载入
  * use使用
  * assign赋值
  * store存储
  * write写入
* 对于volitile型变量的特殊规则：原理-volatile修饰的共享变量在进行写操作的时候会多一行汇编代码，luck前缀指令在多核处理器下引发两件事情：将当前处理器缓存行的数据写回到系统内存（声言该信号期间，处理器可以独占使用任何共享内存，锁总线，其他CPU不能访问总线）；这个写回内存的操作会引起其他CPU里缓存了该内存地址的数据无效（缓存一致性协议，每个处理器通过嗅探在总线上传播的数据来检查自己的缓存的值是否过期，当处理器发现自己缓存行对应的内存地址被修改，就会将当前处理器的缓存行设置为无效状态。 MESI（修改，独占，共享，无效）控制协议去维护内部缓存和其他处理器缓存的一致性。在多核处理器系统中进行操作的时候，IA-32 和 Intel 64 处理器能嗅探其他处理器访问系统内存和它们的内部缓存。它们使用嗅探技术保证它的内部缓存，系统内存和其他处理器的缓存的数据在总线上保持一致。）。
  * 特性1：
  * 特性2：

## 2.线程