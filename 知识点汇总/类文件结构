## 1.Class类文件的结构

​		Class文件是一组以8位字节为基础单位的二进制流，各个数据项目严格按照顺序紧凑排列在Class文件之中，中间没有添加任何分隔符，这使得整个Class文件中存储的内容几乎全部是程序运行的必要数据，没有空隙存在。Class文件格式采用一种类似于C语言结构体的伪结构来存储数据，只有两种数据类型：无符号数（属于基本的数据类型，以u1,u2,u4,u8代表1、2、4、8个字节的无符号数，可以用来描述数字、索引引用、数量值或者按照UTF-8编码构成的字符串值）和表（由多个无符号数或者其他表作为数据项构成的复合数据类型，所有表都习惯性地以“info”结尾，可以用来描述有层次关系的复合结构的数据），整个Class文件本质上就是一张表。

* **魔数与Class文件的版本**：头4个字节为魔数（0xCAFEBABE），第5第6个字节为次版本号，第7第8个字节为主版本号。
* **常量池**：紧接着主次版本号之后的是常量池入口，可以理解为Class文件的资源仓库。常量池中常量个数不固定，入口放置一项u2类型的数据代表容量计数值（从1开始计数，总值-1为常量个数）。主要存放两大类常量：字面量和符号引用。常量池中每项常量都是一个表，表的第一位是一个u1类型的标志位，代表当前常量属于哪种常量类型。
* **访问标志**：常量池结束后，紧接着两个字节代表访问标志，用于识别一些类或接口层次的访问信息，包括Class是类还是接口，是否定义为public，是否定义为abstract；如果是类的话，是否被声明为final等。
* **类索引、父类索引与接口索引集合**：按顺序排列在访问标记之后。类索引和父类索引都是一个u2类型的数据，而接口索引集合是一组u2类型的数据的集合，Class文件中由这3项数据来确定这个类的继承关系。类索引：确定这个类的全限定名。父类索引：确定这个类的父类的全限定名。接口索引集合：描述这个类实现了哪些接口，这些被实现的接口将按照implements语句后的接口顺序从左到右排列在接口索引集合中。
* **字段表索引集合**：用于描述接口或者类中声明的变量：包括类级变量和实例级变量，但不包括在方法内部声明的局部变量。描述字段的信息：作用域、实例还是类变量修饰符、可变性、并发可见性、是否被序列化、字段数据类型、字段名称。字段表结构：access_flag, name_index, description_index（字段修饰符、简单名称索引、描述符（描述字段的数据类型、方法的参数列表如[[Ljava/lang/String））。
* **方法表集合**：对方法的描述，结构和字段类似。依次包括：访问标志、名称索引、描述符索引、属性表索引。如果父类方法在子类中没有被重写，方法表集合中就不会出现来自父类的方法信息。要重载一个方法，除了要与原方法具有相同的简单名称之外，还要求必须拥有一个与原方法不同的特征签名（指一个方法中各个参数在常量池中的字段符号引用的集合，但返回值不包含在特征签名中，因此Java语言无法仅仅通过返回值的不同对一个方法进行重载。而在Class文件格式中，返回值不同是可以合法并存在一个Class文件中，因为字节码的特征签名还包括方法返回值和受查差异表）。
* **属性表集合**：在Class文件、字段表、方法表都可以携带自己的属性表集合，以用于描述某些场景专有的信息。
  * Code属性：Java程序方法体的代码被编译我字节码指令存储在Code属性中。max_stack代表操作数栈深度最大值，虚拟机分配栈帧中的操作栈深度。max_locals代表局部变量表所需存储空间，单位Slot。编译器根据变量作用域分配Slot（可重用）给各个变量使用，然后计算max_locals。code用来存储编译后的字节码指令，每条指令占用一个u1单字节，共可表达256条指令（虚拟机规范依据定义了约200条编码值对应的指令含义）。code_length是code的长度，是一个u4长度值，理论可达到2³²-1，但虚拟机规范明确限制一个方法不超过65535条字节码指令，即只使用了u2的长度，如果超过限制javac编译器将拒绝编译。

## 2.指令