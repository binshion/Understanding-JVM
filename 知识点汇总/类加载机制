## 1.什么是类加载机制

​		类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这就是虚拟机的类加载机制。

​		在Java语言中，类型的加载、连接和初始化过程都是在程序运行期间完成的，这种策略虽然会令类加载时稍微增加一些性能开销，但是会为Java应用程序提供高度的灵活性，Java里天生可以动态扩展的语言特性就是依赖运行期动态加载和动态连接这个特点实现的。

## 2.类加载的时机

​		整个生命周期包括：加载、验证、准备、解析、初始化、使用、卸载这7个阶段，其中验证、准备、解析3个部分统称为连接。

​		加载、验证、准备、初始化、卸载这5个阶段的顺序是确定的，而解析阶段则不一定，它在某些情况下可以在初始化阶段之后再开始，这是为了支持Java语言的运行时绑定。

​		对于初始化阶段，虚拟机规范严格规定了有且只有5种情况必须立即对类进行“初始化”（加载、验证、准备自然需要在此之前开始）：

* 遇到new、getstatic、putstatic或invokestatic这4条字节码指令时，如果类没有进行过初始化，则必须先触发其初始化。常见场景“使用new关键字实例化对象、读取或设置一个类的静态字段（被final修饰、已在编译期把结果放入常量池的静态字段除外）的时候，以及调用一个类的静态方法的时候。
* 使用reflect包的方法对类进行反射调用的时候，如果类没有进行过初始化，则需要先触发其初始化。
* 当初始化一个类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化。
* 当虚拟机启动时，用户需要指定一个要执行的主类（含main方法的类），虚拟机会先初始化这个主类。
* 当使用JDK1.7的动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果REF_getStatic、REF_putStatic、REF_invokeStatic的方法句柄，并且这个方法句柄所对应的类没有进行过初始化，则需要先触发其初始化。

## 3.类加载的过程

* 加载：加载阶段，虚拟机需要完成以下3件事：
  * 通过一个类的全限定名来获取定义此类的二进制字节流。
  * 将这个字节流所代表的静态存储结果转化为方法区的运行时数据结构。
  * 在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口（没有明确规定在Java堆中，对HotSpot虚拟机而言，Class对象比较特殊，它虽然是对象，但是存放在方法区中）。
* 验证：这一阶段的目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。验证阶段大致上会完成下面4个阶段的检验动作：
  * 文件格式验证：验证字节流是否符合Class文件格式的规范，并且能被当前版本的虚拟机处理。如是否以魔数开头，主次版本号是否在当前虚拟机处理范围内等等。
  * 元数据验证：对字节码描述的信息进行语义分析，以保证其描述的信息符合Java语言规范的要求。如这个类这个类不是抽象类，是否实现了其父类或接口之中要求实现的所有方法。
  * 字节码验证：整个验证过程中最复杂的一个阶段，主要目的是通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。这个阶段将对类的方法体进行校验分析，保证被校验类的方法在运行时不会做出危害虚拟机安全的事件，如保证方法体中的类型转换是有效的，不能把父类对象复制给子类数据类型等。
  * 符号引用验证：最后一个阶段的校验发生在虚拟机将符号引用转化为直接引用的时候。符号引用的目的是确保解析动作能正常执行，如果无法通过符号引用验证，那么将抛出IncompatibleClassChangeError异常的子类，如NoSuchMethodError等。
* 准备：
* 解析：

## 4.类加载器

