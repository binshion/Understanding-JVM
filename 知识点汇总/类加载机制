## 1.什么是类加载机制

​		类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这就是虚拟机的类加载机制。

​		在Java语言中，类型的加载、连接和初始化过程都是在程序运行期间完成的，这种策略虽然会令类加载时稍微增加一些性能开销，但是会为Java应用程序提供高度的灵活性，Java里天生可以动态扩展的语言特性就是依赖运行期动态加载和动态连接这个特点实现的。

## 2.类加载的时机

​		整个生命周期包括：加载、验证、准备、解析、初始化、使用、卸载这7个阶段，其中验证、准备、解析3个部分统称为连接。

​		加载、验证、准备、初始化、卸载这5个阶段的顺序是确定的，而解析阶段则不一定，它在某些情况下可以在初始化阶段之后再开始，这是为了支持Java语言的运行时绑定。

​		对于初始化阶段，虚拟机规范严格规定了有且只有5种情况必须立即对类进行“初始化”（加载、验证、准备自然需要在此之前开始）：

* 遇到new、getstatic、putstatic或invokestatic这4条字节码指令时，如果类没有进行过初始化，则必须先触发其初始化。常见场景“使用new关键字实例化对象、读取或设置一个类的静态字段（被final修饰、已在编译期把结果放入常量池的静态字段除外）的时候，以及调用一个类的静态方法的时候。
* 使用reflect包的方法对类进行反射调用的时候，如果类没有进行过初始化，则需要先触发其初始化。
* 当初始化一个类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化。
* 当虚拟机启动时，用户需要指定一个要执行的主类（含main方法的类），虚拟机会先初始化这个主类。
* 当使用JDK1.7的动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果REF_getStatic、REF_putStatic、REF_invokeStatic的方法句柄，并且这个方法句柄所对应的类没有进行过初始化，则需要先触发其初始化。

## 3.类加载的过程

* 加载：加载阶段，虚拟机需要完成以下3件事：
  * 通过一个类的全限定名来获取定义此类的二进制字节流。
  * 将这个字节流所代表的静态存储结果转化为方法区的运行时数据结构。
  * 在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口（没有明确规定在Java堆中，对HotSpot虚拟机而言，Class对象比较特殊，它虽然是对象，但是存放在方法区中）。
* 验证：这一阶段的目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。验证阶段大致上会完成下面4个阶段的检验动作：
  * 文件格式验证：验证字节流是否符合Class文件格式的规范，并且能被当前版本的虚拟机处理。如是否以魔数开头，主次版本号是否在当前虚拟机处理范围内等等。
  * 元数据验证：对字节码描述的信息进行语义分析，以保证其描述的信息符合Java语言规范的要求。如这个类这个类不是抽象类，是否实现了其父类或接口之中要求实现的所有方法。
  * 字节码验证：整个验证过程中最复杂的一个阶段，主要目的是通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。这个阶段将对类的方法体进行校验分析，保证被校验类的方法在运行时不会做出危害虚拟机安全的事件，如保证方法体中的类型转换是有效的，不能把父类对象复制给子类数据类型等。
  * 符号引用验证：最后一个阶段的校验发生在虚拟机将符号引用转化为直接引用的时候。符号引用的目的是确保解析动作能正常执行，如果无法通过符号引用验证，那么将抛出IncompatibleClassChangeError异常的子类，如NoSuchMethodError等。
* 准备：正式为类变量分配内存并设置类变量初始值（这里所说的初始值“通常情况”下是数据类型的零值，特殊清理：如果类字段的字段属性表中存在ConstantValue属性，那么准备阶段就会被初始为指定的值）的阶段，这些变量所使用的内存都将在方法区中进行分配。
* 解析：虚拟机将常量池内的符号引用替换为直接引用的过程。解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用电限定符7类符号引用进行。
  * 符号引用：以一组符号来描述所引用的目标，可以使任何形式的字面量，只要使用时能无歧义地定位到目标即可。
  * 直接引用：可以是直接指向目标的指针、相对偏移量或一个能间接定位到目标的句柄。如果有了直接引用，那引用的目标必定已经在内存中存在。
* 初始化：类加载过程的最后一步。真正开始执行类中定义的Java程序代码。在准备阶段，变量已经赋过一次系统要求的初始值，而在初始化阶段，则根据程序员通过程序制定的主管计划去初始化类变量和其他资源。
  * <clinit>方法：类中所有类变量的赋值动作和静态语句块（static{}块）中的语句合并产生的，收集的顺序由语句在源文件中出现的顺序所决定。
  * <clinit>方法不需要显式调用父类构造器，虚拟机会调用子类前，父类的方法已经执行完毕。第一个被虚拟机执行的是Object。
  * 由于父类先执行，意味着父类定义的静态语句块先于子类变量赋值操作。
  * 该方法对于类或接口来说并不是必需的，如果一个类中没有静态语句块，也没有对变量赋值操作，那么编译器可以不为这个类生成<clinit>方法。
  * 接口不能使用静态语句块，但存在变量初始化的赋值操作。接口不需要先执行父类的这个方法，只有当父接口中定义的变量使用时，父接口才会初始化。
  * 虚拟机会保证一个类的<clinit>方法在多线程环境中被正确的加锁、同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的<clinit>方法。

## 4.类加载器

​		类加载阶段中的“通过一个类的全限定名来获取描述此类的二进制字节流”这个动作放到了Java虚拟机外部去实现，以便让应用程序自己决定如何去获取所需要的类。实现这个动作的代码模块称为“类加载器”。

* 类与类加载器：对于任意一个类，都需要由加载它的类加载器和这个类本身一同确立其在Java虚拟机中的唯一性，每一个类加载器，都拥有一个独立的类名称空间。
* 双亲委派模型：只存在两种不同的类加载器，一种是启动类加载器，是虚拟机的一部分；另一种是所有其他的类加载器，独立于虚拟机外部，并且全部继承自抽象类java.lang.ClassLoader。类加载器之间的这种层次关系称为类加载器的双亲委派模型。双亲委派模型要求除了顶层的启动类加载器外，其余的类加载器都应当有自己的父类加载器（使用组合关系复用父加载器的代码）。双亲委派模型的工作过程：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求时，子加载器才会尝试自己去加载。使用双亲委派模型来组织类加载器之间的关系，有一个显而易见的好处就是Java类随着它的类加载器一起具备了一种带有优先级的层次关系。双亲委派模型对于保证Java程序的稳定运作很重要，但它的实现却很简单，代码集中在java.lang.ClassLoader的loadClass()中。
  * 启动类加载器：负责将存放在<JAVA_HOME>\lib目录中的，或者被-Xbootclasspath参数所指定的路径中的，并且是虚拟机识别的类库加载到虚拟机内存中。
  * 扩展类加载器：负责加载<JAVA_HOME>\lib\ext目录中的，或者被java.ext.dirs系统变量所指定的路径中的所有类库。
  * 应用程序类加载器：这个类加载器是ClassLoader中getSystemClassLoader（）的返回值，所以一般也称为系统类加载器。它负责加载用户类路径ClassPath上所指定的类库。
* 破坏双亲委派模型：
  * 第一次：模型出现之前。1.2版本之后为了向前兼容，ClassLoader类新增了findClass()方法，在loadClass()如果父类加载失败，则会调用自己的findClass()方法来完成加载，这样就可以保证新的加载器是符合双亲委派规则的。
  * 第二次：模型自身缺陷导致-解决了各个类加载器的基础类的同一问题，但是基础类可能又要调用回用户代码。典型例子JNDI服务，解决方法是引入了一个不太优雅的设计：线程上下文类加载器。
  * 第三次：用户对程序动态性的追求而导致的。代码热替换、模块热部署等，每一个程序模块都有一个自己的类加载器，当需要个换一个程序模块时，就把程序模块连同类加载器一起换掉以实现代码的热替换。

