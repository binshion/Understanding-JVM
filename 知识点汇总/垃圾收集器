* 哪些内存需要回收？
* 什么时候回收？
* 如何回收？

## 1.哪些内存需要回收

​		Java内存运行时区域的各个部分，其中程序计数器、虚拟机栈、本地方法栈随线程而生，随线程而灭；栈中的栈帧随着方法的进入和退出执行着出栈和入栈操作。每个栈帧中分配多少内存基本上在类结构确定下来时就已知，因此这几个区域的内存分配和回收具备确定性，不需要过多考虑回收的问题，因为方法结束或县城结束时，内存自然就跟随回收了。而Java堆和方法区则不一样，一个接口中的多个实现类需要的内存可能不一样，一个方法的多个分支需要的内存也不一样，我们只有在程序处于运行期才知道会创建哪些对象，这部分内存的分配和回收都是动态的，垃圾收集器所关注的是这个部分的内存。

## 2.什么时候回收

* **引用计数算法**：<u>（常规答复）</u>给对象中添加一个引用计数器，每当有一个地方引用它时，计数器值加1；当引用失效时，计数器值减1；任何时刻计数器为0的对象就是不可能再被使用的。**但是，至少主流的Java虚拟机里面没有选用引用计数算法来管理内存，其中最主要的原因是它很难解决对象之间互相循环引用的问题。**

* **可达性分析算法**：通过一系列的称为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链，当一个对象到GC Roots没有任何引用链相连时，则证明此对象是不可用的。

  可作为GC Roots的对象包括：

  * 虚拟机栈（栈帧中的本地变量表）中引用的对象
  * 方法区中类静态属性引用的对象
  * 方法区中常量引用的对象
  * 本地方法栈中JNI（即一般说的Native方法）引用的对象
  
* 再谈引用：当内存空间还足够时，则能保存在内存之中；如果内存空间在垃圾收集后还是非常紧张，则可以抛弃这些对象。

  * 强引用：普遍存在，只要强引用还存在，垃圾收集器永远不会回收掉被引用的对象。
  * 软引用：描述一些还有用但并非必需的对象。对于软引用关联着的对象，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中进行第二次回收。如果这次回收还没有足够的内存，才会抛出内存溢出异常。
  * 弱引用：描述非必需的对象，但它的强度比软引用更弱一些，被软引用关联的对象只能生存到下一次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉被弱引用关联的对象。
  * 虚引用：也成为幽灵引用或幻影引用，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知。
  
* 生存还是死亡：可达性分析算出的不可达对象，要真正宣告一个对象死亡，至少要经历两次标记过程：

  * 第一次标记：可达性分析对象不可达时，将被第一次标记并且进行一次筛选，筛选条件：此对象是否有必要执行finalize()方法。当对象没有覆盖finalize()方法或者finalize()方法已经被虚拟机调用过，视为“没有必要执行”。
  * 第二次标记：对象被判定有必要执行finalize()方法，那么对象将会被放置到一个叫做F-Queue的队列中，稍后由一个虚拟机自动建立的、低优先级的Finalizer线程去执行它。finalize()方法是对象逃脱死亡的最后一次机会，稍后GC将对F-Queue中的对象进行第二次小规模的标记，如果对象要在finalize()中成功拯救自己（重新与引用链上的任何一个对象建立关联，如把自己赋值给某个类变量或对象的成员变量），那么第二次标记时它将被移除出“即将回收”的集合；如果对象这时候还没逃脱，那基本上要真的被回收了。
  
* 回收方法区：主要回收两部分内容：废弃常量和无用的类。在大量使用反射、动态代理、CGLib等ByteCode框架、动态生成JSP以及OSGi这类频繁自定义ClassLoader的场景都需要虚拟机具备类卸载的功能，以保证永久代不会溢出。

  * 判断常量是否可回收：与Java堆中的对象非常类似。
  * 判断类是否可回收：同时满足3个条件才能算“无用的类”：
    * 该类的所有实例都被回收（即Java堆中不存在该类的任何实例）
    * 加载该类的ClassLoader已经被回收
    * 该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。

## 3.如何回收

* 垃圾收集算法
  * **标记-清除算法**：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。此算法是**最基础的收集算法**，因为后续的收集算法都是基于这种思路并对其不足进行改进而得到的。**主要不足有两个**：一是效率问题，标记和清除连个过程的效率都不高；另一个是空间问题，标记清除后会产生大量不连续的内存碎片，空间碎片太多可能导致需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。
  * **复制算法**：**为了解决效率问题**而出现的算法。将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另一块上面，然后再把已使用过的内存空间一次清理掉。这样使得每次都是对整个半区进行内存回收，内存分配时不用考虑内存碎片等复杂情况，只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。代价：内存缩小了原来的一半。商业虚拟机都采用这种收集算法回收新生代：研究表明，新生代中对象98%都是“朝生夕死”的，所以并不需要按照1：1比例来划分内存空间，而是将内存分为一块较大的Eden空间和两块较小的Survivor空间，每次使用Eden和其中一块Survivor。当回收时，Eden和Survivor中还存活的对象一次性复制到另一块Survivor空间中，最后清理掉Eden和刚才用过的Survivor空间。HotSpot虚拟机默认Eden和Survivor是8：1：1，每次新生代可用空间为90%，只有10%的内存会被“浪费”。没法保证每次回收都只有不多于10%的对象存活，当Survivor空间不够用时，需要依赖其他内存（这里指老年代）进行分配担保。
  * **标记-整理算法**：复制算法在对象存活率较高时就要进行较多的复制操作，效率将会变低。更关键的是，如果不想浪费50%的空间，就需要有额外的空间进行分配担保，以应对被使用的内存中所有对象都100%存活的极端情况，所以老年代一般不能直接选用这种算法。根据老年代的特点而生的算法。标记过程和“标记-清除”的算法一样，但是后续步骤不是直接对可回收对象进行清理，而是让所以存活的对象都向一端移动，然后直接清理掉边界以外的内存（存活对象和需要回收对象的分界线处）。
  * **分代收集算法**：当前商业虚拟机的垃圾收集都采用“分代收集”算法，一般把Java堆分为新生代和老年代，这样可以根据各个年代的特点采用最适当的收集算法。新生代选用复制算法，老年代必须使用“标记-清除”或“标记-整理”算法来进行回收。
  
* HotSpot的算法实现

  * 枚举根节点：可作为GC Roots的节点主要在全局性引用（如常量或类静态属性）与执行上下文（如栈帧中的本地变量表）中，现在很多应用在方法区内存很大，逐个检查这里的引用必然消耗很多时间。另外可达性分析对执行时间的敏感还体现在GC停顿上（分析工作必须在一个能确保一致性的快照中进行，这点是导致GC必须停顿所有Java执行线程的一个重要原因。CMS收集器在枚举根节点也必须停顿）。HotSpot使用一组称为OopMap的数据结构来达到当执行系统停顿下来时，不需要一个不漏地检查根节点的目的。在类加载完成的时候，HotSpot就把对象内什么偏移量上是什么类型的数据计算出来，在JIT（just in time）编译过程中也会在特定位置记录下栈和寄存器中哪些位置时引用。这样GC扫描时就可以直接得到这些信息。
  * 安全点：可能导致引用关系变化（或称为OopMap内容变化）的指令非常多，每条指令都生成对应的OopMap将需要大量的额外空间，GC的空间成本变高。只有在“特定的位置”记录这些信息，这些位置称为安全点（Safepoint）,程序只有在到达安全点时才能暂停。安全点的选定基本上是以“是否具有让程序长时间执行的特征”为标准进行选定，因为每条指令执行时间非常短暂，程序不太可能因为指令流长度太长而过长时间运行，“长时间执行”的最明显特征是指令序列复用，如方法调用、循环跳转、异常跳转等，所以具有这些功能的指令才会产生Safepoint。问题二：如何在GC发生时让所有线程都在最近的安全点上再次停顿下来（两种方案：抢先式中断和主动式中断）。抢先式中断：不需要线程的执行代码主动配合，在GC发送时，首先把所有线程全部中断，如果发现有线程中断的地方不在安全点上就恢复它直到跑到安全点上（几乎没有虚拟机采用这种方式）。主动式中断：思想是当GC需要中断线程的时候，不直接对线程操作，简单地设置一个标志，各个线程执行时主动去轮询这个标志，发现中断标志为真就自己中断挂起。轮询标志的地方和安全点是重合的，另外再加上创建对象需要分配内存的地方。
  * 安全区域：Safepoint机制保证了程序执行时，在不太长的时间内就会遇到可进入GC的Safepoint，但是无法解决程序“不执行”时的场景（即没有分配CPU时间，典型例子：线程sleep或blocked状态，这时候线程无法响应JVM的中断请求，到安全的地方去中断挂起）。安全区域是指在一段代码片段之中，引用关系不会发生变化，这个区域中的任意地方开始GC都是安全的（Safe Region看作是扩展了的Safepoint）。在线程执行到Safe Region中的代码时，首先标识自己已进入了安全区域，那样，当在这段时间里JVM发起GC时，就不用关标识了自己为Safe Region状态的线程了。在线程要离开安全区域时，它要检查系统是否已完成根节点枚举（或者是整个GC过程），如果完成那线程就继续执行，否则它就必须等待直到收到可以安全离开Safe Region的信号为止。

* 垃圾收集器

  * Serial（连续的、顺序排列的）收集器：单线程的收集器，在进行垃圾收集时必须暂停其他所有的工作线程，直到它收集结束。（为消除或者减少工作线程因内存回收而导致停顿的努力一直进行着，从Serial到Parallel再到CMS乃至最前沿成果G1，用户线程的停顿时间再不断缩短，但仍然无法完全消除）。它是虚拟机运行在client模式下的默认新生代收集器，优点：简单而高效（与其他收集器的单线程相比），对于限定单个CPU的环境来说，无线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集效率。

  * ParNew收集器：其实是Serial的多线程版本，除了多线程收集之外，其他与Serial收集器相比并没有太多创新之处，但它却是许多运行在Server模式下的虚拟机中首选的新生代收集器（一个重要原因，除了Serial外，只有它能和CMS配合工作）。它也是使用-XX:UseConcMarkSweepGC选项后的默认新生代收集器。它默认开启的收集线程数和CPU的数量相同，可以通过-XX:ParallelGCThreads限制垃圾收集的线程数。

  * Parallel Scavenge收集器：也是采用复制算法的收集器，又是并行的多线程收集器，看上去和ParNew一样，但关注点不同。CMS等收集器关注点是尽可能缩短垃圾收集时用户线程的停顿时间，而这种收集器的目标则是达到一个可控制的吞吐量（Throughput），即吞吐量=运行用户代码时间 /（运行用户代码时间 + 垃圾收集时间）。停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能提升用户的体验，而搞吞吐量则可以高效率利用CPU时间，尽快完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务。-XX:MaxGCPauseMillis控制最大垃圾收集停顿时间允许的值是一个大于0的毫秒数，收集器尽可能保证内存回收花费的时间不超过设定值。-XX:GCTimeRatio参数的值应当是一个大于0且小于100的整数，为垃圾收集时间占总时间的比率,相当于是吞吐量的倒数。默认值为99，就是允许最大1%（1/(1+99)）的垃圾收集时间。如果为19，则为1/(1+19)。系统将花费的时间用于垃圾收集计算公式：1/(1+n)。吞吐量优先收集器，参数-XX:+UseAdaptiveSizePolicy实现GC自适应调节策略。

  * Serial Old收集器：是Serial收集器的老年代版本，同样是单线程收集器，使用“标记-整理”算法。主要意义也是给Client模式下的虚拟机使用。在Server模式下有两大主要用途：JDK1.5以前版本和Parallel Scavenge搭配使用，另一种是作为CMS的后备预案，在并发收集发生Cocurrent Mode Failure时使用。

  * Parallel Old收集器：是Parallel Scavenge收集器的老年代版本，使用多线程和“标记-整理”算法，JDK1.6中才开始提供。在注重吞吐量以及CPU资源敏感的场合，都可以优先考虑Parallel Scavenge加Parallel Old收集器。

  * CMS收集器（Concurrent Mark Sweep）：收集器是一种以获取最短回收停顿时间为目标的收集器。基于“标记-清除”算法实现，整个过程分为4个步骤：

    * 初始标记

    * 并发标记

    * 重新标记

    * 并发清除

      其中，初始标记、重新标记这两步骤仍然需要Stop the World,初始标记仅仅只是标记一下GC Roots能直接关联的对象，速度很快，并发标记阶段就是进行GC Roots Tracing的过程，而重新标记阶段则是为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般比初始标记阶段稍长一些，单远比并发标记的时间短。

      主要优点：并发收集、低停顿。

      三个缺点：

      * 对CPU非常敏感。在并发阶段，它虽然不会导致用户线程停顿，但会因为占用了一部分线程（或者说CPU资源）而导致应用程序变慢，总吞吐量会降低。CMS默认启动的回收线程数是（CPU数 + 3）/ 4，随着CPU数量的增加，并发回收垃圾收集线程的CPU资源会下降。但CPU不足4个时，CMS对用户程序的影响可能变得很大，可能分出一半运算能力去执行收集器线程，导致用户程序执行速度忽然降低50%。为应付这种情况，虚拟机提供了“增量式并发收集器”的CMS收集器变种，所做的事情和单CPU使用抢占式来模拟多任务机制的思想一样，在并发标记、清理阶段让GC线程和用户线程交替运行，尽量减少GC线程独占资源的时间，这样整个垃圾收集的过程会更长，而用户程序的速度下降没那么明显（实践证明效果一般，i-CMS被声明为"deprecated"）。
      * 无法处理浮动垃圾，可能出现“Concurrent Mode Failure”失败而导致另一次Full GC的产生。浮动垃圾：CMS并发清理阶段用户线程产生的新垃圾出现在标记过程之后，CMS无法在当次收集中处理。垃圾收集阶段用户线程需要运行，所以需要预留足够内存空间，因此CMS不能等到老年代几乎全部被填满再进行收集，需要留部分空间提供并发收集时的程序运作使用。JDK1.5默认设置CMS收集器当老年代使用68%的空间后会被激活（偏保守，可通过参数调高这个比例，JDK1.6的CMS启动阀值已提升至92%）。要是CMS运行期间预留的内存无法满足程序需要，就会出现一次“Concurrent Mode Failure”失败，这是启动后备预案：临时启用Serial Old收集器来重新进行老年代的垃圾收集，这样停顿时间就长了。
      * 基于“标记-清除”算法意味着收集结束时会产生大量空间碎片。空间碎片过多时，将给大对象分配带来很大麻烦，往往会出现老年代还有很大空间剩余，但是无法找到足够大连续空间来分配给当前对象，不得不提前触发一次Full GC。为解决这问题，CMS收集器提供-XX:+UseCMSCompactAtFullCollection开关参数（默认开启），用于顶不住要进行FullGC时开启内存碎片的合并整理过程，该过程无法并发，因此停顿时间不得不变长。此外还提供另一个参数-XX:CMSFullGCsBeforeCompaction,用于设置执行多少次不压缩的Full GC后，跟着来一次带压缩的（默认为0，表示每次进入Full GC时都进行碎片整理）。

  * G1收集器